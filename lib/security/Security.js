/*! letrest - v0.0.21 - 2015-03-27 */var CONFIG=require("../Config.js").getSecurity().config,DB=require("uw").DB,LOG=require("uw").log,Q=require("q"),UTIL=require("util"),MOMENT=require("moment"),JWT=require("jwt-simple"),PR=require("../protocol/Protocol.js"),STRATEGY=require(CONFIG.STRATEGY.IMPORT),VALIDATOR=require("jsonschema").Validator,SCHEMA=require("./credentialschema.json"),MODULE="SECURITY	",createPayload=function(a,b,c,d){var e=MOMENT().add(CONFIG.KEYEXPIRATION,"hours").valueOf(),f={sso:a,ttl:e,role:b,name:c,nick:d};return f},createSessionToken=function(a,b,c,d){return JWT.encode(createPayload(a,b,c,d),CONFIG.KEYPASS)},recoverSessionToken=function(a){return JWT.decode(a,CONFIG.KEYPASS)},validateSessionToken=function(a){var b=recoverSessionToken(a),c=MOMENT()-b.ttl;if(c>0)throw new Error("Session expired");return b};exports.secure=function(a){return function(b,c,d){var e=a.weight||-1;LOG.info(MODULE,"Validating weight for %s with weight %s",a.name,e),b.letrest&&b.letrest.session&&b.letrest.session.role?e>b.letrest.session.role.weight?(LOG.warn(MODULE,"Not enough rights for request"),c.send(403)):d():e>-1?(LOG.warn(MODULE,"User must be logged to use the service"),c.send(401)):d()}},exports.config=function(a){a.use(function(a,b,c){var d=!1;if(a.headers.origin&&(b.header("Access-Control-Allow-Origin",a.headers.origin),d=!0),a.headers["access-control-request-method"]&&(b.header("Access-Control-Allow-Methods",a.headers["access-control-request-method"]),d=!0),a.headers["access-control-request-headers"]&&(b.header("Access-Control-Allow-Headers",a.headers["access-control-request-headers"]),d=!0),d&&b.header("Access-Control-Max-Age",31536e3),d&&"OPTIONS"==a.method)b.status(200).end();else{var e;try{var f=a.header("Token");if(LOG.info(MODULE,"Populating session for token =>",f),f&&(e=validateSessionToken(f)),!e)throw new Error}catch(g){LOG.error(MODULE,"Failed to parse token",f,g.toString()),e=void 0}a.letrest={session:e},c()}}),a.use(CONFIG.SECURED_PATH.path,function(a,b,c){LOG.info("Authorized request");try{var d=a.header("Token");if(!d)throw new Error("Unauthorized request");var e=validateSessionToken(d),f=new RegExp("^[/]"+e.sso+"$|^[/]"+e.sso+"[/]");if(!f.test(a.url))throw new Error("Unauthorized path request");c()}catch(g){LOG.error(g),b.send(401,PR.newError(401,"You need to have a valid session"))}}),a.post(CONFIG.REGISTER_PATH.path,function(){console.log("should not  have a session")});var b=function(a){LOG.info(MODULE,"Mixining in session with roles");var b=Q.defer();return STRATEGY.getRoles().then(function(c){for(var d={},e=0;e<c.length;e++)d[c[e][CONFIG.CREDENTIAL_ROLE]]=c[e][CONFIG.CREDENTIAL_WEIGHT];b.resolve({roles:d,session:a})}),b.promise};a.get(CONFIG.ROLE_PATH.path,function(a,c){var d;try{var e=a.header("Token");e&&(d=validateSessionToken(e)),delete d.ttl}catch(f){d=void 0}b(d).then(function(a){c.send(PR.success("session","get",a))})["catch"](function(a){c.send(PR.newError(2,"Failed to retrieve roles",a))})}),a.post(CONFIG.LOGIN_PATH.path,function(a,c){try{var d=a.body,e=(new VALIDATOR).validate(d,SCHEMA);e.errors.length>0?c.send(400,e.errors):STRATEGY.login(a.body).then(function(a){if(null==a)c.send(PR.newError(0,"Username or password incorrect",""));else{var d={name:"GUEST",weight:-1};a[CONFIG.CREDENTIAL_ROLE]&&(d.name=a[CONFIG.CREDENTIAL_ROLE],d.weight=a[CONFIG.CREDENTIAL_WEIGHT],d.id=a[CONFIG.CREDENTIAL_ROLE_ID]);var e=a[CONFIG.CREDENTIAL_NAME]||"Guest",f=createPayload(a[CONFIG.CREDENTIAL_KEY],d,e,a[CONFIG.CREDENTIAL_NICK]);delete f.ttl,b(f).then(function(b){c.send({msg:"Login successful",token:createSessionToken(a[CONFIG.CREDENTIAL_KEY],d,e,a[CONFIG.CREDENTIAL_NICK]),session:b})})["catch"](function(a){LOG.error(MODULE,a),c.send(PR.newError(1,"Internal problem error",a))})}})["catch"](function(a){LOG.error(MODULE,a),c.send(PR.newError(1,"Internal problem error",a))})}catch(f){c.send(PR.newError(2,"Bad format message",f))}})};
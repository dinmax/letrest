/*! letrest - v0.3.4 - 2016-07-20 */var CONFIG=require("../Config.js").getSecurity().config,Q=require("q"),MOMENT=require("moment"),JWT=require("jwt-simple"),PR=require("../protocol/Protocol.js"),STRATEGY=require(CONFIG.STRATEGY.IMPORT),VALIDATOR=require("jsonschema").Validator,SCHEMA=require("./credentialschema.json"),MODULE="SECURITY\t",LOG=require("uw-log").newInstance(MODULE),EXCEPTIONS={},ROLES={},createPayload=function(a,b,c,d){var e=MOMENT().add(CONFIG.KEYEXPIRATION,"hours").valueOf(),f={sso:a,ttl:e,role:b,name:c,nick:d};return f},createSessionToken=function(a,b,c,d){return JWT.encode(createPayload(a,b,c,d),CONFIG.KEYPASS)},recoverSessionToken=function(a){return JWT.decode(a,CONFIG.KEYPASS)},validateSessionToken=function(a){var b=recoverSessionToken(a),c=MOMENT()-b.ttl;if(c>0)throw new Error("Session expired");return b},cacheRoles=function(){return LOG.info("Loading roles"),STRATEGY.getRoles().then(function(a){for(var b={},c=0;c<a.length;c++){var d={};d[CONFIG.CREDENTIAL_WEIGHT]=Number(a[c][CONFIG.CREDENTIAL_WEIGHT]),d.id=Number(a[c].id),b[a[c][CONFIG.CREDENTIAL_ROLE]]=d}LOG.info("Roles loaded"),ROLES=b})},reloadRoles=function(a){return LOG.info("Reload roles"),cacheRoles()};exports.reloadRoles=reloadRoles;var cacheExceptions=function(){return LOG.info("Loading exceptions"),STRATEGY.getServiceExceptions().then(function(a){var b={};for(e in a){var c=a[e];b[c.accountid]||(b[c.accountid]={}),b[c.accountid][c.service]=c.permission}LOG.info("Exceptions loaded"),EXCEPTIONS=b})},reloadExceptionsByAccount=function(a){return LOG.info("Reloading exceptions for account: "+accont.accountid),STRATEGY.getServiceExceptions(a.accountid).then(function(b){b&&(EXCEPTIONS[a.accountid]=b),LOG.info("Exceptions reloaded")})};exports.reloadExceptionsByAccount=reloadExceptionsByAccount,exports.secure=function(a,b){return function(c,d,e){function f(a,b){var d=a==c.letrest.session.role.name,e=!b&&a<=c.letrest.session.role.weight,f=b&&a==c.letrest.session.role.weight;return d||e||f}var g=b.weight||a.weight,h=b.weightStrict||a.weightStrict||!1,i=g;Array.isArray(g)||(i=[g]);var j=a.name||b.name;if(LOG.info("Validating weight for "+j+" with weight "+g),c.letrest&&c.letrest.session&&c.letrest.session.role){if(EXCEPTIONS[c.letrest.session.sso]&&"undefined"!=typeof EXCEPTIONS[c.letrest.session.sso][j])l=EXCEPTIONS[c.letrest.session.sso][j];else for(var k=0,l=!1;k<i.length&&!l;k++)l=f(i[k],h);l?e():(LOG.warning("Not enough rights for request"),d.send(403))}else g!==-1?(LOG.warning("User must be logged to use the service"),d.send(401)):e()}},exports.config=function(a){a.use(function(a,b,c){var d=!1;if(a.headers.origin&&(b.header("Access-Control-Allow-Origin",a.headers.origin),d=!0),a.headers["access-control-request-method"]&&(b.header("Access-Control-Allow-Methods",a.headers["access-control-request-method"]),d=!0),a.headers["access-control-request-headers"]&&(b.header("Access-Control-Allow-Headers",a.headers["access-control-request-headers"]),d=!0),d&&b.header("Access-Control-Max-Age",31536e3),d&&"OPTIONS"==a.method)b.status(200).end();else{var e;try{var f=a.header("Token");if(LOG.info("Populating session for token =>",f),f&&(e=validateSessionToken(f)),!e)throw new Error}catch(a){LOG.error("Failed to parse token",f,a.toString()),e=void 0}a.letrest={session:e},c()}}),a.use(CONFIG.SECURED_PATH.path,function(a,b,c){LOG.info("Authorized request");try{var d=a.header("Token");if(!d)throw new Error("Unauthorized request");var e=validateSessionToken(d),f=new RegExp("^[/]"+e.sso+"$|^[/]"+e.sso+"[/]");if(!f.test(a.url))throw new Error("Unauthorized path request");c()}catch(a){LOG.error(a),b.status(401).send(PR.newError(401,"You need to have a valid session"))}}),a.post(CONFIG.REGISTER_PATH.path,function(a,b){LOG.info("should not  have a session")}),a.get(CONFIG.ROLE_PATH.path,function(a,b){var c;try{var d=a.header("Token");d&&(c=validateSessionToken(d)),delete c.ttl}catch(a){c=void 0}b.send(PR.success("session","get",{roles:ROLES,session:c}))}),a.post(CONFIG.LOGIN_PATH.path,function(a,b){try{var c=a.body,d=(new VALIDATOR).validate(c,SCHEMA);d.errors.length>0?b.status(400).send(d.errors):STRATEGY.login(a.body).then(function(a){if(null==a)b.send(PR.newError(0,"Username or password incorrect",""));else{var c={name:"GUEST",weight:-1};a[CONFIG.CREDENTIAL_ROLE]&&(c.name=a[CONFIG.CREDENTIAL_ROLE],c.weight=Number(a[CONFIG.CREDENTIAL_WEIGHT]),c.id=Number(a[CONFIG.CREDENTIAL_ROLE_ID]));var d={},e=a[CONFIG.CREDENTIAL_NAME]||"Guest",f=createPayload(a[CONFIG.CREDENTIAL_KEY],c,e,a[CONFIG.CREDENTIAL_NICK],d);delete f.ttl,b.send({msg:"Login successful",token:createSessionToken(a[CONFIG.CREDENTIAL_KEY],c,e,a[CONFIG.CREDENTIAL_NICK]),session:f})}}).catch(function(a){LOG.error(a),b.send(PR.newError(2,"Internal problem error",a))})}catch(a){b.send(PR.newError(2,"Bad format message",a))}}),cacheRoles().then(function(){CONFIG.ALLOW_EXCEPTIONS&&cacheExceptions()})};